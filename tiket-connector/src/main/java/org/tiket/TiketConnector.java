/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.tiket;

import java.io.IOException;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.rest.*;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="tiket", schemaVersion="1.0-SNAPSHOT", friendlyName="Tiket")
public abstract class TiketConnector {
    /**
     * Configurable
     */
    @Configurable
    private String myProperty;

    /**
     * Set property
     *
     * @param myProperty My property
     */
    public void setMyProperty(String myProperty)
    {
        this.myProperty = myProperty;
    }

    /**
     * Get property
     */
    public String getMyProperty()
    {
        return this.myProperty;
    }
    
    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/Tiket-connector.xml.sample tiket:my-processor}
     *
     * @param content Content to be processed
     * @return Some string
     */
    @Processor
    public String myProcessor(String content)
    {
        /*
         * MESSAGE PROCESSOR CODE GOES HERE
         */
    	return "Another string";
    }
    
    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password)
        throws ConnectionException {
        /*
         * CODE FOR ESTABLISHING A CONNECTION GOES IN HERE
         */
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        /*
         * CODE FOR CLOSING A CONNECTION GOES IN HERE
         */
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return true;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/Tiket-connector.xml.sample tiket:search-flights}
     * 
     * @param token
     *     token to use api
     * @param date
     *     date of departure
     * @param adults
     *     number of passengers
     * @param d
     *     ISO code for departure airport
     * @param a
     *     ISO code for destination airport
     * @param outputsf
     *     output format
     * @return Some string
     * @throws IOException
     *      when the call fails
     */
    @Processor
    @RestCall(uri = "http://api.master18.tiket.com/search/flight?", method = HttpMethod.GET)
    public abstract String searchFlights(
        @RestQueryParam("token") String token,
        @RestQueryParam("d") String d,
        @RestQueryParam("a") String a,
        @RestQueryParam("date") String date,
        @RestQueryParam("adults") String adults,
        @RestQueryParam("output") String outputsf)
        throws IOException;
    
    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/Tiket-connector.xml.sample tiket:get-flight-data}
     * 
     * @param token
     *     token to use api
     * @param date
     *     date of departure
     * @param flight_id
     *     number of passengers
     * @param outputgfd
     *     output format
     * @return Some string
     * @throws IOException
     *      when the call fails
     */
    @Processor
    @RestCall(uri = "http://api.master18.tiket.com/flight_api/get_flight_data?", method = HttpMethod.GET)
    public abstract String getFlightData(
        @RestQueryParam("token") String token,
        @RestQueryParam("date") String date,
        @RestQueryParam("flight_id") String flight_id,
        @RestQueryParam("output") String outputgfd)
        throws IOException;
    
    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/Tiket-connector.xml.sample tiket:get-token}
     * 
     * @param secretkey
     *     key to use api
     * @param outputtoken
     *     output format
     * @return Some string
     * @throws IOException
     *      when the call fails
     */
    @Processor
    @RestCall(uri = "http://api.master18.tiket.com/apiv1/payexpress?method=getToken", method = HttpMethod.GET)
    public abstract String getToken(
        @RestQueryParam("secretkey") String secretkey,
        @RestQueryParam("output") String outputtoken)
        throws IOException;
}
